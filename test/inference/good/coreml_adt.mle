type 'a list = Nil | Cons of 'a * 'a list
type nat = Zero | Succ of nat
let rec
['c] (length : 'c list -> nat) =
  ['c]
  fun (l : 'c list) ->
    match l[] with Nil['c] -> Zero[] | Cons['c](_, xs) -> Succ[] (length['c] xs[])
let
(n : nat) = length[int] (Cons[int] (1, Cons[int] (2, Cons[int] (3, Nil[int]))))